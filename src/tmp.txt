in12: List[Instruction] = data(12, lambda line: (line[0], int(line[1:])))

Point = Heading = Tuple[int, int]

directions = dict(N=(0, 1), E=(1, 0), S=(0, -1), W=(-1, 0))

def navigate(instructions, loc=(0, 0), heading=directions['E']) -> Point:
    "Follow instructions to change ship's loc and heading; return final loc."
    for op, n in instructions:
        if   op == 'R': heading = turn(n, *heading)
        elif op == 'L': heading = turn(-n, *heading)
        elif op == 'F': loc = go(n, *loc, *heading)
        else:           loc = go(n, *loc, *directions[op])
    return loc

def turn(degrees, x, y) -> Heading:
    "Turn `degrees` from the current (x, y) heading."
    return (x, y) if degrees % 360 == 0 else turn(degrees - 90, y, -x)
            
def go(n, x, y, dx, dy) -> Point: 
    "Go n steps in the (dx, dy) direction from (x, y)."
    return (x + n * dx, y + n * dy)

def manhatten_distance(point) -> int: return sum(map(abs, point))

def day12_1(instructions): return manhatten_distance(navigate(instructions))

def navigate2(instructions, loc=(0, 0), way=(10, 1)) -> Point:
    "Follow updated instructions to change ship's loc and waypoint; return final loc."
    for op, n in instructions:
        if   op == 'R': way = turn(n, *way)
        elif op == 'L': way = turn(-n, *way)
        elif op == 'F': loc = go(n, *loc, *way)
        else:           way = go(n, *way, *directions[op])
    return loc

def day12_2(instructions): return manhatten_distance(navigate2(instructions))

